# Grafana monitoring dashboard for Zama Jobs API
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: monitoring
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true

    [grafana_net]
    url = https://grafana.net

    [log]
    mode = console

    [paths]
    data = /var/lib/grafana/
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning

    [security]
    admin_user = admin
    admin_password = admin

    [server]
    http_port = 3000

  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      url: http://prometheus.monitoring.svc.cluster.local:9090
      access: proxy
      isDefault: true

  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards

  zama-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Zama Jobs API Overview",
        "tags": ["zama", "jobs", "overview"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "title": "API Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(kong_http_requests_total[5m])",
                "legendFormat": "{{ instance }}"
              }
            ],
            "yAxes": [
              {
                "label": "Requests/sec",
                "min": 0
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 0
            }
          },
          {
            "title": "Job Processing Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(zama_jobs_processed_total[5m])",
                "legendFormat": "Processed"
              },
              {
                "expr": "rate(zama_jobs_submitted_total[5m])",
                "legendFormat": "Submitted"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 0
            }
          },
          {
            "title": "Response Time",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.50, rate(kong_latency_bucket[5m]))",
                "legendFormat": "50th percentile"
              },
              {
                "expr": "histogram_quantile(0.95, rate(kong_latency_bucket[5m]))",
                "legendFormat": "95th percentile"
              },
              {
                "expr": "histogram_quantile(0.99, rate(kong_latency_bucket[5m]))",
                "legendFormat": "99th percentile"
              }
            ],
            "yAxes": [
              {
                "label": "Milliseconds",
                "min": 0
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 8
            }
          },
          {
            "title": "Error Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(kong_http_requests_total{status=~\"4..\"}[5m])",
                "legendFormat": "4xx errors"
              },
              {
                "expr": "rate(kong_http_requests_total{status=~\"5..\"}[5m])",
                "legendFormat": "5xx errors"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 8
            }
          },
          {
            "title": "Active Jobs",
            "type": "singlestat",
            "targets": [
              {
                "expr": "zama_jobs_active_total"
              }
            ],
            "gridPos": {
              "h": 4,
              "w": 6,
              "x": 0,
              "y": 16
            }
          },
          {
            "title": "Blockchain Confirmations Pending",
            "type": "singlestat",
            "targets": [
              {
                "expr": "zama_blockchain_confirmations_pending"
              }
            ],
            "gridPos": {
              "h": 4,
              "w": 6,
              "x": 6,
              "y": 16
            }
          },
          {
            "title": "Database Connections",
            "type": "singlestat",
            "targets": [
              {
                "expr": "postgres_connections_active"
              }
            ],
            "gridPos": {
              "h": 4,
              "w": 6,
              "x": 12,
              "y": 16
            }
          },
          {
            "title": "NATS Messages/sec",
            "type": "singlestat",
            "targets": [
              {
                "expr": "rate(nats_server_total_msgs[5m])"
              }
            ],
            "gridPos": {
              "h": 4,
              "w": 6,
              "x": 18,
              "y": 16
            }
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "5s"
      }
    }

  cilium-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Cilium Network Metrics",
        "tags": ["cilium", "network", "ebpf"],
        "panels": [
          {
            "title": "Network Policy Drops",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(cilium_drop_count_total[5m])",
                "legendFormat": "{{ reason }}"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 0
            }
          },
          {
            "title": "eBPF Program Load Time",
            "type": "graph",
            "targets": [
              {
                "expr": "cilium_bpf_program_load_duration_seconds",
                "legendFormat": "{{ program }}"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 0
            }
          },
          {
            "title": "Service Load Balancing",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(cilium_services_events_total[5m])",
                "legendFormat": "{{ action }}"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 24,
              "x": 0,
              "y": 8
            }
          }
        ]
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.0.0
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: admin
        volumeMounts:
        - name: grafana-config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
        - name: grafana-storage
          mountPath: /var/lib/grafana
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-datasources
        configMap:
          name: grafana-config
          items:
          - key: datasources.yaml
            path: datasources.yaml
      - name: grafana-dashboards-config
        configMap:
          name: grafana-config
          items:
          - key: dashboards.yaml
            path: dashboards.yaml
      - name: grafana-dashboards
        configMap:
          name: grafana-config
          items:
          - key: zama-overview.json
            path: zama-overview.json
          - key: cilium-dashboard.json
            path: cilium-dashboard.json
      - name: grafana-storage
        emptyDir:
          sizeLimit: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
  selector:
    app: grafana